This the UDP protocol of Besen WB with APP


**************************************************************************************************
Packet checksum
**************************************************************************************************

Each UDP packets have a checksum at the end, stored before the 2 last constant bytes.
The algorithm is quite simple (and scary!):     
You just need to add each byte of the packet, byte per byte, from the first 0601… to the last byte before the checksum.        
Each round you need to do a modulus 0X10000 to be sure the sum didn’t go behind 16 bits. And that’s it!
See the C code example in the folder Checksum.
Checksum is stored in Big Endian.


**************************************************************************************************
client_ID
**************************************************************************************************

The 8 digits client_ID is random, one per application.
BUT! The first byte is always 86, and the last observed to be 43 (most) or 44 (rare).
(badly designed random générator?)


**************************************************************************************************
Command: Stop Charging
**************************************************************************************************

WB Phil
06 01 00 48 00 91 81 10 27 51 21 95 13 31 32 33 34 35 36 80 08 01 38 36 30 30 37 39 37 39 38 35 37 38 39 32 34 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 cc 0f 02

WB Florent
06 01 00 48 00 49 57 91 72 43 50 64 89 31 32 33 34 35 36 80 08 01 38 36 30 37 37 31 34 30 38 36 37 38 36 32 34 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 7D 0F 02


Byte per byte :

06 : * len 2:
01 : * Constant 0601, BESEN custom protocol
00 :   * len 2:
48 :   * packet length, from the begining (including 06 01 ...)
00 : * reserved ?
91 :   * len 8:
81 :   *
10 :   *
27 :   *
51 :   *
21 :   *
95 :   *
13 :   * device serial number (as accessible in APP, About charger, Device Number OR on WB screen)
31 : * len 6:
32 : *
33 : *
34 : *
35 : *
36 : * password, ASCII (here 123456)
80 : BESEN PROTOCOL ? 80 08 01 for STOP charge
08 : BESEN PROTOCOL ? 
01 : BESEN PROTOCOL ? 
38 : start of charge ID ( format 8600797985789243 )
36
30
30
37 : follow of charge id  797985 ??
39
37
39
38
35
37 : 1st byte User Id, as we find it in "My records, last column" in the APP (here 786243)
38 : User Id
39 : User Id
32 : User Id
34 : User Id
33 : User Id
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
00
07 : * len 2
cc : custom checksum see https://github.com/Phil242/reverse-besen-API/tree/main/Checksum 
0f : * len 2
02 : * Constant 0F02, BESEN protocol ?


**************************************************************************************************
Command: Start Charging
**************************************************************************************************

WB Phil
06 01 00 48 00 91 81 10 27 51 21 95 13 31 32 33 34 35 36 80 07 01 38 36 30 30 37 39 37 39 38 35 37 38 39 32 34 33 31 36 34 39 34 35 35 34 32 31 32 38 38 30 39 36 00 62 50 5c dd 01 01 ff ff ff ff ff ff 10 13 0c 0f 02

WB Florent
06 01 00 48 00 49 57 91 72 43 50 64 89 31 32 33 34 35 36 80 07 01 38 36 30 37 37 31 34 30 38 36 37 38 36 32 34 33 31 36 34 39 34 35 32 31 35 38 32 34 30 30 35 33 00 62 50 50 1E 01 01 ff ff ff ff ff ff 10 12 e3 of 02

WB Phil, byte per byte:
06 : * len 2
01 : * Constant 0601, BESEN custom protocol
00 :   * len 2
48 :   * packet length, from the begining (including 06 01 ...)
00 : * Always 00
91 :   * len 8
81 :   *
10 :   *
27 :   *
51 :   *
21 :   *
95 :   *
13 :   * device serial number (as accessible in APP, About charger, Device Number OR on WB screen)
31 : * len 6
32 : *
33 : *
34 : *
35 : *
36 : * password (here 123456)
80 :   * len 3
07 :   *
01 :   * Besen command: Start charging, 800701
38 : * len 16
36 : *
30 : *
30 : *
37 : *
39 : *
37 : *
39 : *
38 : *
35 : *
37 : *
38 : *
39 : *
32 : *
34 : *
33 : * client_ID (in ASCII) ?
31 :   * len 16
36 :   *
34 :   *
39 :   *
34 :   *
35 :   *
35 :   *
34 :   *
32 :   *
31 :   *
32 :   *
38 :   *
38 :   *
30 :   *
39 :   *
36 :   * timestamp EPOQ format (in ASCII)
00 : * len 5 ?
62 : *
50 : *
5c : *
dd : * another timestamp (last 2 bytes give the seconds beetween 2 charges)
01 :   * ?
01 :   * ?
ff : * ?
ff : * ?
ff : * ?
ff : * ?
ff : * ?
ff : * ?
10 :   * Max Current of the charge, here 0x10 = 16A
13 : * len2
0c : * custom checksum see https://github.com/Phil242/reverse-besen-API/tree/main/Checksum
0f :   * len 2
02 :   * Constant 0F02, BESEN custom protocol

